version: '3.8'

#==================================================
# DOCKER NETWORKS
#==================================================
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  db:
    driver: bridge

#==================================================
# DOCKER VOLUMES
#==================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

#==================================================
# SERVICES
#==================================================
services:
  #================================================
  # PostgreSQL Database
  #================================================
  db:
    image: postgres:16-alpine
    container_name: kurutracker_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME:-kurutracker}
      POSTGRES_USER: ${DB_USER:-kurutracker_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-kurutracker_user} -d ${DB_NAME:-kurutracker}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  #================================================
  # Redis Cache & Celery Broker
  #================================================
  redis:
    image: redis:7-alpine
    container_name: kurutracker_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  #================================================
  # Mailhog - Email Testing Service
  #================================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: kurutracker_mailhog
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"  # SMTP server
      - "${MAILHOG_WEB_PORT:-8025}:8025"   # Web UI
    networks:
      - backend
    restart: unless-stopped

  #================================================
  # Django Web Application
  #================================================
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: kurutracker_web
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      # Mount source code for hot reload
      - .:/app
      # Named volumes for persistent data
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      # Don't mount these directories (keep them in container)
      - /app/__pycache__
      - /app/*.egg-info
    ports:
      - "${WEB_PORT:-8000}:8000"
    env_file:
      - .env
    environment:
      # Django settings
      DEBUG: ${DEBUG:-True}
      SECRET_KEY: ${SECRET_KEY:-django-insecure-dev-key-change-me}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,web,nginx}

      # Database
      USE_SQLITE: "False"
      DB_NAME: ${DB_NAME:-kurutracker}
      DB_USER: ${DB_USER:-kurutracker_user}
      DB_PASSWORD: ${DB_PASSWORD:-changeme123}
      DB_HOST: db
      DB_PORT: 5432

      # Redis & Celery
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0

      # Email (Mailhog)
      EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend
      EMAIL_HOST: mailhog
      EMAIL_PORT: 1025
      EMAIL_USE_TLS: "False"
      EMAIL_HOST_USER: ""
      EMAIL_HOST_PASSWORD: ""
      DEFAULT_FROM_EMAIL: noreply@kurutracker.local

      # Site URL
      SITE_URL: ${SITE_URL:-http://localhost:8000}
    networks:
      - frontend
      - backend
      - db
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    stdin_open: true
    tty: true

  #================================================
  # Celery Worker - Background Tasks
  #================================================
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: kurutracker_celery_worker
    command: celery -A config worker --loglevel=info --concurrency=2
    volumes:
      - .:/app
      - media_volume:/app/media
    env_file:
      - .env
    environment:
      DEBUG: ${DEBUG:-True}
      SECRET_KEY: ${SECRET_KEY:-django-insecure-dev-key-change-me}

      # Database
      USE_SQLITE: "False"
      DB_NAME: ${DB_NAME:-kurutracker}
      DB_USER: ${DB_USER:-kurutracker_user}
      DB_PASSWORD: ${DB_PASSWORD:-changeme123}
      DB_HOST: db
      DB_PORT: 5432

      # Redis & Celery
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0

      # Email (Mailhog)
      EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend
      EMAIL_HOST: mailhog
      EMAIL_PORT: 1025
      EMAIL_USE_TLS: "False"
      EMAIL_HOST_USER: ""
      EMAIL_HOST_PASSWORD: ""
      DEFAULT_FROM_EMAIL: noreply@kurutracker.local
    networks:
      - backend
      - db
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A config inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  #================================================
  # Celery Beat - Periodic Tasks Scheduler
  #================================================
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: kurutracker_celery_beat
    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      DEBUG: ${DEBUG:-True}
      SECRET_KEY: ${SECRET_KEY:-django-insecure-dev-key-change-me}

      # Database
      USE_SQLITE: "False"
      DB_NAME: ${DB_NAME:-kurutracker}
      DB_USER: ${DB_USER:-kurutracker_user}
      DB_PASSWORD: ${DB_PASSWORD:-changeme123}
      DB_HOST: db
      DB_PORT: 5432

      # Redis & Celery
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    networks:
      - backend
      - db
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  #================================================
  # Nginx - Web Server for Static/Media Files
  #================================================
  nginx:
    image: nginx:alpine
    container_name: kurutracker_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    ports:
      - "${NGINX_PORT:-80}:80"
    networks:
      - frontend
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  #================================================
  # pgAdmin - PostgreSQL Management (Optional)
  #================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: kurutracker_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@kurutracker.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - db
    depends_on:
      - db
    restart: unless-stopped
    profiles:
      - tools  # Only start with: docker-compose --profile tools up
