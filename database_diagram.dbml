// Kurutracker Database Schema (DBML)
// Use this file at https://dbdiagram.io to generate visual database diagrams
// Documentation: https://dbml.dbdiagram.io/docs

// ====================
// USER MANAGEMENT
// ====================

Table users {
  id integer [primary key, increment]
  email varchar(254) [unique, not null, note: 'Used as username - email-based authentication']
  password varchar(128) [not null, note: 'Hashed password']
  first_name varchar(150)
  last_name varchar(150)

  // Role-based access control
  role varchar(10) [not null, default: 'TEACHER', note: 'TEACHER, STAFF, MANAGER']
  is_pre_registered boolean [default: false, note: 'User must be pre-registered by Staff/Admin to login']
  is_auditor boolean [default: false, note: 'User can access audit checklist']

  // Django built-in
  is_staff boolean [default: false, note: 'Django admin access']
  is_superuser boolean [default: false]
  is_active boolean [default: true]

  // Additional fields
  phone_number varchar(20)
  department varchar(100)
  disable_expiration_emails boolean [default: false, note: 'Opt out of email notifications for expiring requests']

  // Timestamps
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  last_login timestamp

  // Indexes
  indexes {
    (email)
    (role)
    (is_active)
    (is_auditor)
    (role, is_active) [name: 'idx_user_role_active']
  }
}

// ====================
// ITEM MANAGEMENT
// ====================

Table item_categories {
  id integer [primary key, increment]
  name varchar(100) [unique, not null]
  description text
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]

  indexes {
    (name)
  }
}

Table items {
  id integer [primary key, increment]

  // Basic information
  name varchar(200) [not null]
  model varchar(100) [note: 'Model/Version of the item']
  asset_id varchar(50) [unique, not null, note: 'Unique asset identification number']
  category_id integer [not null, ref: > item_categories.id]
  description text
  image varchar(100) [note: 'Path to item image']
  price decimal(10,2) [note: 'Purchase price']

  // Location tracking
  location varchar(200) [note: 'DEPRECATED - use home_base_location']
  home_base_location_id integer [ref: > locations.id, note: 'Default location where item belongs (set by Staff)']
  current_location_id integer [ref: > locations.id, note: 'Current physical location (updated by owner)']
  room_id integer [ref: > rooms.id, note: 'Room code (e.g., sc201, sc202)']
  location_description text [note: 'Free-form location description']

  // Ownership & Status
  current_owner_id integer [not null, ref: > users.id]
  status varchar(20) [not null, default: 'NORMAL', note: 'NORMAL, DAMAGED, LOST, REPAIR, PENDING_INSPECTION, REMOVED']

  // Additional metadata
  date_acquired date [not null, note: 'Date when item was first added to system']
  notes text [note: 'Internal notes about the item']

  // Timestamps
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]

  indexes {
    (asset_id)
    (current_owner_id, status) [name: 'idx_item_owner_status']
    (category_id)
    (status)
    (date_acquired)
  }
}

// ====================
// LOCATION MANAGEMENT
// ====================

Table locations {
  id integer [primary key, increment]
  building varchar(100) [not null, note: 'Building name or number']
  floor varchar(50) [not null, note: 'Floor number or name']
  room varchar(50) [not null, note: 'Room number (e.g., 201-254)']
  description text [note: 'Additional location details']
  is_active boolean [default: true, note: 'Inactive locations are hidden from selection']
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]

  indexes {
    (building, floor)
    (is_active)
  }

  Note: 'Unique constraint on (building, floor, room)'
}

Table rooms {
  id integer [primary key, increment]
  code varchar(50) [unique, not null, note: 'Room identifier (e.g., sc201, sc202)']
  description varchar(200) [note: 'Optional room description']
  is_active boolean [default: true, note: 'Inactive rooms are hidden from selection']
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]

  indexes {
    (code)
    (is_active)
  }
}

// ====================
// TRANSFER SYSTEM
// ====================

Table transfer_requests {
  id integer [primary key, increment]

  // Request metadata
  request_type varchar(10) [not null, note: 'ASSIGN (Staff->Teacher) or RETURN (Teacher->Staff)']
  status varchar(10) [not null, default: 'PENDING', note: 'PENDING, ACCEPTED, REJECTED, EXPIRED']

  // Parties involved
  from_user_id integer [not null, ref: > users.id, note: 'User initiating the transfer']
  to_user_id integer [not null, ref: > users.id, note: 'User receiving the item']
  item_id integer [not null, ref: > items.id]

  // Additional info
  notes text [note: 'Reason for transfer or condition notes']
  new_status varchar(20) [note: 'For returns: Status to set when accepted (e.g., NORMAL, DAMAGED, REPAIR)']

  // Timestamps
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  resolved_at timestamp [note: 'When request was accepted/rejected']
  expires_at timestamp [note: 'Request expires 7 days after creation']

  // Expiration tracking
  original_item_status varchar(20) [note: 'Item status before PENDING_INSPECTION (for RETURN requests)']
  expiration_extended_until timestamp [note: 'Admin-extended expiration deadline']
  manually_expired_by_id integer [ref: > users.id, note: 'Manager who manually expired this request']
  warning_48h_sent boolean [default: false, note: 'Whether 48-hour expiration warning has been sent']
  warning_24h_sent boolean [default: false, note: 'Whether 24-hour expiration warning has been sent']

  indexes {
    (status, to_user_id) [name: 'idx_request_status_to_user']
    (item_id, status) [name: 'idx_request_item_status']
    (expires_at)
    (from_user_id)
    (status, expires_at) [name: 'idx_request_status_expires']
    (status, warning_48h_sent) [name: 'idx_request_warning_48h']
    (status, warning_24h_sent) [name: 'idx_request_warning_24h']
  }

  Note: 'Unique constraint: Only one pending request per item'
}

Table transfer_logs {
  id integer [primary key, increment]

  // Transfer details
  item_id integer [ref: > items.id, note: 'Nullable to preserve audit trail even if item is deleted']
  from_user_id integer [not null, ref: > users.id]
  to_user_id integer [not null, ref: > users.id]
  request_id integer [ref: > transfer_requests.id, note: 'Null for forced transfers']

  // Metadata
  transferred_at timestamp [not null, default: `now()`]
  notes text
  is_forced boolean [default: false, note: 'True if this was a forced transfer by Manager']

  indexes {
    (item_id, transferred_at) [name: 'idx_log_item_transferred']
    (from_user_id, transferred_at) [name: 'idx_log_from_user_transferred']
    (to_user_id, transferred_at) [name: 'idx_log_to_user_transferred']
  }

  Note: 'IMMUTABLE - Transfer logs cannot be modified after creation'
}

// ====================
// NOTIFICATION SYSTEM
// ====================

Table notifications {
  id integer [primary key, increment]

  // Notification details
  recipient_id integer [ref: > users.id, note: 'Nullable to preserve history even if user is deleted']
  notification_type varchar(30) [not null, note: 'NEW_REQUEST, REQUEST_ACCEPTED, REQUEST_REJECTED, REQUEST_EXPIRING_SOON, REQUEST_EXPIRED, ITEM_DAMAGED, ITEM_LOST, ITEM_FOUND']
  title varchar(200) [not null]
  message text [not null]

  // Related objects
  related_request_id integer [ref: > transfer_requests.id]
  related_item_id integer [ref: > items.id]

  // Status
  is_read boolean [default: false]

  // Timestamps
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]

  indexes {
    (recipient_id, is_read, created_at) [name: 'idx_notification_recipient_read']
  }
}

// ====================
// AUDIT SYSTEM
// ====================

Table auditor_assignments {
  id integer [primary key, increment]

  // Assignment details
  auditor_id integer [not null, ref: > users.id, note: 'Must be a user with is_auditor=true']
  location_id integer [ref: > locations.id, note: 'Auditor can audit items in this location']
  department varchar(100) [note: 'Auditor can audit items owned by users in this department']
  is_global boolean [default: false, note: 'Auditor can audit ALL items regardless of location/department']

  // Timestamps
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]

  indexes {
    (auditor_id)
    (location_id)
    (is_global)
  }

  Note: 'Unique constraint on (auditor_id, location_id) and (auditor_id, department)'
}

// ====================
// RELATIONSHIPS OVERVIEW
// ====================
// All relationships are defined inline in the table definitions above using ref: syntax
//
// Key Relationships:
// - users (1) -> (many) items (current_owner_id)
// - users (1) -> (many) transfer_requests (from_user_id, to_user_id)
// - users (1) -> (many) transfer_logs (from_user_id, to_user_id)
// - users (1) -> (many) notifications (recipient_id)
// - users (1) -> (many) auditor_assignments (auditor_id)
// - item_categories (1) -> (many) items (category_id)
// - locations (1) -> (many) items (home_base_location_id, current_location_id)
// - locations (1) -> (many) auditor_assignments (location_id)
// - rooms (1) -> (many) items (room_id)
// - items (1) -> (many) transfer_requests (item_id)
// - items (1) -> (many) transfer_logs (item_id)
// - transfer_requests (1) -> (many) transfer_logs (request_id)
// - transfer_requests (1) -> (many) notifications (related_request_id)
// - items (1) -> (many) notifications (related_item_id)
